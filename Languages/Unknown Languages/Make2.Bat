echo %1 %2
echo /Language=%1 >%1_%2
echo /C_L_DialectName=? >>%1_%2
echo /C_L_Case=no >>%1_%2
echo /C_L_Comment=comment >>%1_%2
echo /C_L_Extention=.%1  >>%1_%2
echo /C_L_MultiLine= CRLF >>%1_%2
echo /C_L_Process= FC%1 >>%1_%2
echo /C_L_VarCh=. >>%1_%2
echo /name=Start >>%1_%2
echo /Author=Library >>%1_%2
echo /version=1 >>%1_%2
echo /filename = Start%1.symbol >>%1_%2
echo /stroke=%1 >>%1_%2
echo /programtext= Goto {[(Address1.Pathname])]}   /';No {[(Address0.PathName)]}     >>%1_%2
echo /notes=%1 Auto Made >>%1_%2
echo /line = -250,250,250,250,Red >>%1_%2
echo /line = -250,-250,-250,250,Green >>%1_%2
echo /line = 250,-250,-250,-250,Blue >>%1_%2
echo /line = 250,250,250,-250,orange >>%1_%2
echo /line = -250,250,250,-250,Purple >>%1_%2
echo /line = 250,250,-250,-250,brown >>%1_%2
echo /point = -50 , 250 , Output , Logic , GotoNextLine >>%1_%2
echo /name=End >>%1_%2
echo /author=Library >>%1_%2
echo /version=1 >>%1_%2
echo /filename = End%1.symbol >>%1_%2
echo /stroke=A >>%1_%2
echo /programtext={[(CameFrom)]} >>%1_%2
echo /opcode=nop >>%1_%2
echo /line = -250,100,250,100,Red >>%1_%2
echo /line = 250,100,250,-100,Green >>%1_%2
echo /line = 250,-100,-250,-100,Yellow >>%1_%2
echo /line = -250,-100,-250,100,Blue >>%1_%2
echo /point = 0,100, input, logic, ComeFrom >>%1_%2
echo /point = -250 , 0 , Input , Integer , CameFrom >>%1_%2
echo /name=If >>%1_%2
echo /author=Library >>%1_%2
echo /version=1 >>%1_%2
echo /filename = %1If.symbol >>%1_%2
echo /stroke=B >>%1_%2
echo /programtext=CameFrom If a < b THEN GOTO c ELSEIF a > b THEN GOTO c ELSE GOTO e >>%1_%2
echo /notes=cameFrom IF a > b THEN GOTO c ELSEIF a < b THEN GOTO d ELSE GOTO e >>%1_%2
echo /opcode=nop >>%1_%2
echo /line = 0,250,250,0,Red >>%1_%2
echo /line = 250,0,0,-250,Green >>%1_%2
echo /line = 0,-250,-250,0,Yellow >>%1_%2
echo /line = -250,0,0,250,Blue >>%1_%2
echo /point = 0,-250, input, logic, cameFrom >>%1_%2
echo /point = 0,-250, input, logic, GotoNextLine >>%1_%2
echo /point = -150 , 150 , Input , Integer , a >>%1_%2
echo /point = 150 , 150 , Input , Integer , b >>%1_%2
echo /point = -50 , 250 , Output , Logic , c >>%1_%2
echo /point = -50 , 250 , Output , Logic , d >>%1_%2
echo /point = -50 , 250 , Output , Logic , e >>%1_%2
echo /name=Print >>%1_%2
echo /Author=Library >>%1_%2
echo /version=1 >>%1_%2
echo /filename = Print%1.symbol >>%1_%2
echo /stroke=C >>%1_%2
echo /programtext= {[(CameFrom)]} : Print TextString :Goto {[(GotoNextLine.Pathname)]} >>%1_%2
echo /opcode= >>%1_%2
echo /line = -250, 250, 250, 250, Cyan >>%1_%2
echo /line = -250, -250, -250, 250, Crimson >>%1_%2
echo /line = 250, -250, -250, -250, Cornsilk >>%1_%2
echo /line = 250, 250, 250, -250, CornflowerBlue >>%1_%2
echo /line = -250, 250, 250, -250, Coral >>%1_%2
echo /line = 250, 250, -250, -250, Chocolate >>%1_%2
echo /point = -50,  250,  Output,  Logic,  GotoNextLine >>%1_%2
echo /point=-250,  0,  input,  string,  TextString >>%1_%2
echo /name=Called >>%1_%2
echo /Author=Library >>%1_%2
echo /version=1 >>%1_%2
echo /filename=Called%1.symbol >>%1_%2
echo /stroke=E >>%1_%2
echo /programtext=' This calls a procedure with one variable and inputs the name of the procedure >>%1_%2
echo /programtext=call {[(CallName.pathname)]} ( {[(parameter.pathname)]} )  >>%1_%2
echo /syntax= call {[(CallName.pathname)]} ( {[(parameter.pathname)]} ) >>%1_%2
echo /notes=call {[(CallName.PathName)]}(parameter) >>%1_%2
echo /notes=call Subroutine({[(variable)]}) 'if you want to make a symbol for a subroutine name Subroutine >>%1_%2
echo /notes=for 'example subtotals()'  or 'Subroutine({[(a.pathname)]}, {[(b.pathname)]}' >>%1_%2
echo /opcode=nop >>%1_%2
echo /point=0,250, input, logic, camefrom >>%1_%2
echo /point=-200, 250, input, alpha, CallName >>%1_%2
echo /point=200, 250, input, integer, parameter >>%1_%2
echo /point = 0 , -250 , Output , Logic , GotoNextLine >>%1_%2
echo /line = -250,250,250,250,Cyan >>%1_%2
echo /line = -250,-250,-250,250,Crimson >>%1_%2
echo /line = 250,250,250,-250,CornflowerBlue >>%1_%2
echo /line = -250,250,250,-250,Coral >>%1_%2
